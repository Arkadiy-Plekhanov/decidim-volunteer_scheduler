# frozen_string_literal: true

module Decidim
  module VolunteerScheduler
    # Model representing a volunteer's profile with XP, level, and referral information
    class VolunteerProfile < ApplicationRecord
      include Decidim::Traceable
      include Decidim::Loggable

      belongs_to :user, class_name: "Decidim::User"
      belongs_to :organization, class_name: "Decidim::Organization"
      # Remove component association - this is organization-level, not component-level
      # belongs_to :component, class_name: "Decidim::Component", optional: true
      belongs_to :referrer, class_name: "Decidim::VolunteerScheduler::VolunteerProfile", optional: true

      has_many :task_assignments, 
               class_name: "Decidim::VolunteerScheduler::TaskAssignment",
               foreign_key: "assignee_id",
               dependent: :destroy
      
      has_many :referrals_made,
               class_name: "Decidim::VolunteerScheduler::Referral",
               foreign_key: "referrer_id",
               dependent: :destroy
      
      has_many :scicent_transactions,
               class_name: "Decidim::VolunteerScheduler::ScicentTransaction",
               dependent: :destroy

      validates :referral_code, presence: true, uniqueness: true
      validates :level, presence: true, numericality: { greater_than: 0 }
      validates :total_xp, presence: true, numericality: { greater_than_or_equal_to: 0 }
      validates :activity_multiplier, presence: true, numericality: { greater_than: 0 }

      before_validation :generate_referral_code, on: :create
      before_validation :set_defaults, on: :create

      scope :by_level, ->(level) { where(level: level) }
      scope :with_xp_above, ->(xp) { where("total_xp >= ?", xp) }
      scope :active_in_days, ->(days) { where("last_activity_at > ?", days.days.ago) }

      def add_xp(points)
        old_level = level
        self.total_xp += points
        self.last_activity_at = Time.current
        
        calculate_level!
        
        if level > old_level
          level_up_notification(old_level, level)
        end
        
        save!
      end

      def level_thresholds
        # Organization-level default thresholds (no component settings)
        thresholds_setting = "100,500,1000,2500,5000"
        thresholds_setting.split(",").map(&:to_i)
      end

      def next_level_xp
        thresholds = level_thresholds
        return nil if level >= thresholds.length
        
        thresholds[level] - total_xp
      end

      def level_progress_percentage
        thresholds = level_thresholds
        return 100 if level >= thresholds.length
        
        current_threshold = level > 1 ? thresholds[level - 2] : 0
        next_threshold = thresholds[level - 1]
        
        return 100 if next_threshold <= current_threshold
        
        progress = total_xp - current_threshold
        total_needed = next_threshold - current_threshold
        
        [(progress.to_f / total_needed * 100).round, 100].min
      end

      def referral_url
        # This will be generated by the helper method in views
        # Return just the code here for safety
        referral_code
      end

      def total_referrals_count
        referrals_made.count
      end

      def active_referrals_count
        referrals_made.joins(:referred)
                     .where("decidim_volunteer_scheduler_volunteer_profiles.last_activity_at > ?", 30.days.ago)
                     .count
      end

      def calculate_activity_multiplier!
        base_multiplier = 1.0
        
        # Add multiplier based on recent activity
        if last_activity_at && last_activity_at > 7.days.ago
          base_multiplier += 0.1
        end
        
        # Add multiplier based on level
        base_multiplier += (level - 1) * 0.05
        
        # Add multiplier based on active referrals
        base_multiplier += active_referrals_count * 0.02
        
        self.activity_multiplier = [base_multiplier, 3.0].min # Cap at 3x
        save!
      end

      def available_tasks
        # Use optimized query to get available tasks for this volunteer
        TaskTemplatesQuery.new(organization: organization)
                         .available_for_volunteer(self)
                         .limit(daily_task_limit)
                         .order("RANDOM()")
      end

      private
      
      def daily_task_limit
        # Organization-level default limit (no component settings)
        5
      end

      def generate_referral_code
        return if referral_code.present?
        
        loop do
          self.referral_code = SecureRandom.alphanumeric(8).upcase
          break unless self.class.exists?(referral_code: referral_code)
        end
      end

      def set_defaults
        self.level ||= 1
        self.total_xp ||= 0
        self.activity_multiplier ||= 1.0
        self.last_activity_at ||= Time.current
      end

      def calculate_level!
        thresholds = level_thresholds
        new_level = 1
        
        thresholds.each_with_index do |threshold, index|
          if total_xp >= threshold
            new_level = index + 2
          else
            break
          end
        end
        
        self.level = new_level
      end

      def level_up_notification(old_level, new_level)
        Decidim::EventsManager.publish(
          event: "decidim.volunteer_scheduler.volunteer.level_up",
          event_class: Decidim::VolunteerScheduler::VolunteerLevelUpEvent,
          resource: self,
          affected_users: [user],
          extra: {
            old_level: old_level,
            new_level: new_level
          }
        )
      end
    end
  end
end
