You are a Ruby on Rails engineer expert in Decidim module development.  
Your task is to build one single Decidim component—let’s call it “decidim-volunteer_scheduler”—that lives under `app/components/decidim-volunteer_scheduler` and uses only official Decidim extension points (no hacking core, no generators outside decidim:component).  

ENVIRONMENT & CONTEXT  
  • OS: Windows 11 with WSL2 Ubuntu, code at:  
      \\wsl.localhost\Ubuntu\home\scicent\projects\decidim\development_app  
  • Decidim core repo: https://github.com/decidim/decidim  
  • Development install guide: https://docs.decidim.org/en/develop/install/manual  

GOALS & FEATURES  
  1. Volunteer Follow-Up pilot (reuse Decidim’s built-in Follow-Up tasks)  
     • On the front page, show each logged-in volunteer a randomized list of “task templates”  
     • When a volunteer clicks “Accept,” register a Follow-Up assignment  
     • Allow volunteer to mark it done, submit a report, and gain XP  
     • When XP crosses defined caps, level up the volunteer and unlock next tier capabilities  

  2. Five-Level Referral System for “Scicent Token” sales  
     • Each volunteer gets a unique referral link / code at signup  
     • On every token sale by a referred account, pay commission up the chain:  
         • Level 1: 10% of sale, Level 2: 8%, Level 3: 6%, Level 4: 4%, Level 5: 2%  
     • Each active referral also grants an “Activity Boost Multiplier” to the referrer and up to 4 levels above  

  3. Token Distribution Logic  
     • Periodic distribution job: read each volunteer’s Activity score + admin recognition  
     • Multiply by their referral-based Activity Boost Multipliers  
     • Allocate Scicent Tokens accordingly  

  4. Team & Mentorship Bonuses  
     • Volunteers can form teams via Decidim’s group mechanisms  
     • Team leaders earn extra token bonuses based on team performance  
     • Use existing Decidim features where possible  

PRIORITIES & CONSTRAINTS  
  1. **Analyze**: First, read `docs.decidim.org`, your local Decidim code, and this project’s existing migrations, models, controllers, view-helpers, and config.  
  2. **Check**: Validate all naming, style, internationalization (i18n), migrations, schema conventions, and traceability (Decidim::Traceable).  
  3. **Compose**: Build only the models, migrations, services, jobs, controllers, routes, views, and admin UIs that live in this single component—nothing external.  
  4. **Clean Code**: Follow SOLID principles, keep methods short, write tests, use background jobs for heavy work, and never introduce duplication or unused code.  
  5. **Document**: Add clear YARD comments and README updates under the component folder to explain your design and how to configure referral rates, XP caps, and token distribution parameters.  

IMPLEMENTATION OUTLINE  
  1. `rails generate decidim:component volunteer_scheduler`  
  2. Add migrations for: `volunteer_profiles`, `task_templates`, `referrals`, `sales_commissions`, `activity_boosts`  
  3. Implement core models and business logic under `app/models/decidim/volunteer_scheduler/`  
  4. Wire up controllers and views to Decidim’s admin and user engines  
  5. Create ActiveJob workers to:  
     • Process completed tasks → award XP + level  
     • Process token sales → compute and distribute commissions  
     • Compute monthly token distribution based on Activity + Boost  
  6. Hook into Decidim UIs (menu, settings, admin panels) without touching other modules  
  7. Write feature specs and unit tests covering every branch of referral depth, task flow, XP/level edge cases, and distribution  

Before writing any code, output a detailed design document (markdown) that:  
  • Lists models, fields, relationships, indexes  
  • Describes each service/job responsibility and its input/output  
  • Shows example YAML configuration for referral percentages, XP thresholds, and distribution schedule  

Wait for my approval on the design doc, then proceed.  
